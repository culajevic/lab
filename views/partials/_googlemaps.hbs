<section id="google-map">
  <div id="map"></div>
  <div class="labinfo">
    <div class="container">
      <div class="row">
        <div class="col-12 col-md-6 col-xl-4 mapTitle text-center text-sm-center text-md-left" id="way">Sve laboratorije u Srbiji</div>
        <div class="d-none d-md-block col-sm-2 align-self-center flex-column ml-auto">
          <span class="d-flex align-self-start labMapInfo justify-content-end">ukupno laboratorija</span>
          <span class="d-flex align-self-start num justify-content-md-start justify-content-lg-end">{{labNum}}</span>
        </div>
        <div class="d-none d-md-block col-sm-2 align-self-center flex-column">
          <span class="d-flex align-self-start labMapInfo justify-content-end">trenutno otvoreno</span>
          <span class="d-flex align-self-start num justify-content-md-start justify-content-lg-end">{{numOpen}}</span>
        </div>
        <div class="d-none d-md-block col-sm-2 align-self-center flex-column">
          <span class="d-flex align-self-start labMapInfo justify-content-lg-end">laboratorijskih analiza</span><!-- razmisliti o imenu-->
          <span class="d-flex align-self-start num justify-content-md-start justify-content-lg-end">{{analysisNum}}</span>           
        </div>

        <div class="form-group text-center float-left ml-1 ml-sm-3 mt-3 mr-2 agTestCheckbox" id="agBoxArea">
            <input type="checkbox" name="ag" value="1" id="ag" class="mt-1">
             {{!-- <span class="mt-1">Laboratorije koje rade antigenski test</span>    --}}
            <label for="ag" id="agText" class="ml-1 mt-1">Prika≈æi samo laboratorije koje rade antigenski test</label>
        </div>

        {{!-- <div class="legendMap mx-auto ml-sm-auto mt-1 mt-sm-3"> --}}
          {{!-- <div class="float-right mt-1 mt-sm-3" style="display:inline-block; background-color:red;">
          
            <img src="/images/openGreen.svg" alt="laboratorija je trenutno otvorena" class="">
            <span class="text-white">Otvoreno</span>
          
          
            <img src="/images/closedRed.svg" alt="laboratorija je trenutno zatvorena">
            <span class="text-white">Zatvoreno</span>
          
          
        </div> --}}
        <div class="form-group text-center float-left ml-1 mt-1 mt-sm-3 agTestCheckbox">
             <img src="/images/openGreen.svg" alt="laboratorija je trenutno otvorena" class="">
            <span class="text-white mr-3 mt-1">Otvoreno</span>
            <img src="/images/closedRed.svg" alt="laboratorija je trenutno zatvorena">
            <span class="text-white mr-3 mt-1">Zatvoreno</span>
             <img src="/images/pinopen.svg" alt="LabCube partner">
            <span class="text-white mt-1">LabCube partner</span>
        </div>




      </div><!--  row end-->
    </div><!-- container end -->
  </div> <!-- lab info end -->
</section><!-- google map end -->
<!-- {{labInfo}} -->
<script>

let decodedJson = decodeURIComponent("{{{labDetails}}}")
let labData = JSON.parse(decodedJson)


let decodedJsonStatus = decodeURIComponent("{{{labOpen}}}")
let labStatus = JSON.parse(decodedJsonStatus)
let now = new Date()
let day = now.getDay()
let currentDayNum = now.getDay()
let ag = document.getElementById('ag')
let agText = document.getElementById('agText')
let labAg

let markers = []
let markersCluster = []
let passIds = []
let markersArr = []
itemsArray = localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : []
  itemsArray.forEach(item => {
  passIds.push(item.id)
  });

let options = {
  zoom:16,
  disableDefaultUI: true,
  zoomControl: true,
  mapTypeControl: false,
  scaleControl: false,
  streetViewControl: true,
  rotateControl: false,
  fullscreenControl: true,
  fullscreenControlOptions:{
    position:google.maps.ControlPosition.RIGHT_BOTTOM
  },
  styles: [
      {
        "featureType": "administrative.country",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#fbd2d9"
          },
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [
          {
            "color": "#9896a9"
          },
          {
            "weight": 2
          }
        ]
      },
      {
        "featureType": "administrative.land_parcel",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#9896a9"
          }
        ]
      },
      {
        "featureType": "administrative.land_parcel",
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.locality",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "administrative.neighborhood",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "administrative.neighborhood",
        "elementType": "labels",
        "stylers": [
          {
            "color": "#aaa9b1"
          },
          {
            "visibility": "simplified"
          }
        ]
      },
      {
        "featureType": "poi",
        "elementType": "labels.text",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "poi.business",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "poi.park",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#aadc55"
          }
        ]
      },
      {
        "featureType": "poi.park",
        "elementType": "labels.text",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#ecebed"
          },
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "road",
        "elementType": "labels.text",
        "stylers": [
          {
            "color": "#d8d6dc"
          }
        ]
      },
      {
        "featureType": "road.arterial",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#fefefe"
          }
        ]
      },
      {
        "featureType": "road.arterial",
        "elementType": "labels.text",
        "stylers": [
          {
            "color": "#9a9a9a"
          },
          {
            "visibility": "simplified"
          }
        ]
      },
      {
        "featureType": "road.highway",
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road.local",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road.local",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#eaecec"
          },
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "road.local",
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road.local",
        "elementType": "labels.text.fill",
        "stylers": [
          {
            "color": "#9ba4a4"
          },
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "transit",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "transit.station",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "transit.station.bus",
        "stylers": [
          {
            "visibility": "simplified"
          }
        ]
      },
      {
        "featureType": "transit.station.bus",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#ff00ff"
          },
          {
            "visibility": "simplified"
          }
        ]
      },
      {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#1d88e5"
          },
          {
            "lightness": 15
          }
        ]
      }
    ]
}

// let infoWindow = null //obrisati ako treba ukinuti otvaranje i gasenje na klik
let infoWindow = new google.maps.InfoWindow
// new map
let map = new google.maps.Map(document.getElementById('map'), options)
    map.setCenter({lat:44.81617, lng:20.469919})

ag.addEventListener('change', function() {

  if (this.checked) {
    markers = []
    // agText.innerHTML = 'Laboratorije koje rade antigenski test'
    for(i=0; i<labData.length; i++) {
      // let status = (labStatus[i].id).indexOf(labData[i]._id)
      if (labData[i].antigen == true) {

        let status = labStatus[i].status
        markers.push(
          {
            status:status,
            name:labData[i].labName,
            address:labData[i].address,
            city:labData[i].placeId.place,
            phone:labData[i].phone,
            municipality:labData[i].placeId.municipality,
            lat:labData[i].location.coordinates[1],
            lng:labData[i].location.coordinates[0],
            slug:labData[i].slug,
            workingTime:labData[i].workingHours
          })
      }
    } //for end
  } else  {
  markers = []
  for(i=0; i<labData.length; i++) {
    let status = labStatus[i].status
      markers.push(
        {
          status:status,
          name:labData[i].labName,
          address:labData[i].address,
          city:labData[i].placeId.place,
          phone:labData[i].phone,
          municipality:labData[i].placeId.municipality,
          lat:labData[i].location.coordinates[1],
          lng:labData[i].location.coordinates[0],
          slug:labData[i].slug,
          workingTime:labData[i].workingHours
        }
      )
  }
}
  clearOverlays()
  for(i=0; i<markers.length; i++) {
  addMarker(markers[i].lat,
            markers[i].lng,
            markers[i].name,
            markers[i].address,
            markers[i].phone,
            markers[i].status,
            markers[i].slug,
            markers[i].workingTime,
            markers[i].city)
  }

console.log(markers.length)
})

for(i=0; i<labData.length; i++) {
  let status = labStatus[i].status
    markers.push(
      {
        status:status,
        partner:labData[i].partner,
        name:labData[i].labName,
        address:labData[i].address,
        city:labData[i].placeId.place,
        phone:labData[i].phone,
        municipality:labData[i].placeId.municipality,
        lat:labData[i].location.coordinates[1],
        lng:labData[i].location.coordinates[0],
        slug:labData[i].slug,
        workingTime:labData[i].workingHours
      }
    )
}

for(i=0; i<markers.length; i++) {
addMarker(markers[i].lat,
          markers[i].lng,
          markers[i].name,
          markers[i].address,
          markers[i].phone,
          markers[i].status,
          markers[i].slug,
          markers[i].workingTime,
          markers[i].city,
          markers[i].partner)
}


// geo location *************************************************************/
let myLocationOptions = {
  enableHighAccuracy: true,
  // timeout: 5000,
  maximumAge: 0
};

if(navigator.geolocation){
  // navigator.geolocation.watchPosition(mylocation, error, myLocationOptions)
  navigator.geolocation.getCurrentPosition(mylocation, error, myLocationOptions)
} else {
  console.log("Va≈° browser ne podr≈æava geo lokaciju")
}

function mylocation(position) {
  let myLocation = new google.maps.Marker({
    position:{lat:position.coords.latitude, lng:position.coords.longitude},
    map:map,
    icon:'images/red.svg',
    title:'moja trenutna lokacija'
  });
  map.setCenter({lat:position.coords.latitude, lng:position.coords.longitude});
}

function error(error) {
  console.warn(`ERROR(${error.code}): ${error.message}`);
}
/////////////////////////// geolocation end /////////////////////////////



function addMarker(lat, lng, name, address, phone, status, slug, workingTime, city, partner) {

  let marker = new google.maps.Marker({
    position:{lat:parseFloat(lat), lng:parseFloat(lng)},
    icon:{
      //url:(status !== 'closed') ? '/images/openGreen.svg' : '/images/closedRed.svg',
      url:(partner) ? '/images/pinopen.svg' : (status!== 'closed') ? '/images/openGreen.svg' : '/images/closedRed.svg',
      scaledSize: new google.maps.Size(30,41)
    }
    })
    markersArr.push(marker)
    marker.setMap(map)
    const phonesForClick = []

      phone.map(phoneNumber => {
        phonesForClick.push(`<a href=tel:${phoneNumber}>${phoneNumber}</a>`)
        return phonesForClick
      })

    /* <p class="labInfoWindowTelefoni">${phone.join(', ')}</p> */
    // markersCluster.push(marker)
    //vratiti let infoWindow
     // infoWindow.setContent(content)
     //
    let content = `<div class="" style="min-height:142px; max-width:380px;">
              <p class="labInfoWindowTitle mb-0 pb-0"><a href="/laboratorija/${slug}/${passIds}">${name}</a></p>
              <p class="mb-0 pb-0">${address}</p>
              <p> ${city}</p>

              <p class="labInfoWindowTelefoni">${phonesForClick.join(', ')}</p>


            <div class="labInfoWindowFooter">
              <img src="images/radnoVreme.svg" class="labInfoWindowWorkingHoursIcon">
            <div class="radnoVreme">Radno vreme</div>
            <div class="status ${status}"></div>
            <div class="radnoVremeDetalji">

            <p class="whInside text-center ${(day == 1) ? status : ''}">P<span>${workingTime.monday.opens} - ${workingTime.monday.closes}</span></p>
            <p class="whInside text-center ${(day == 2) ? status : ''}">U<span>${workingTime.tuesday.opens} - ${workingTime.tuesday.closes}</span></p>
            <p class="whInside text-center ${(day == 3) ? status : ''}">S<span>${workingTime.wednesday.opens} - ${workingTime.wednesday.closes}</span></p>
            <p class="whInside text-center ${(day == 4) ? status : ''}">ƒå<span>${workingTime.thursday.opens} - ${workingTime.thursday.closes}</span></p>
            <p class="whInside text-center ${(day == 5) ? status : ''}">P<span>${workingTime.friday.opens} - ${workingTime.friday.closes}</span></p>
            <p class="whInside text-center ${(day == 6) ? status : ''}">S<span>${workingTime.saturday.opens} - ${workingTime.saturday.closes}</span></p>
            <p class="whInside text-center ${(day == 0) ? status : ''}">N<span>${workingTime.sunday.opens} - ${workingTime.sunday.closes}</span></p>
            </div>
            </div>
            `

    google.maps.event.addListener(marker, 'click', function(){
      infoWindow.close()
      infoWindow.setContent(content)
      infoWindow.open(map, this)

    })
    // marker.addListener('click', function(){
    //   let placeMarker = infoWindow.open(map, marker);
    // })

    // marker.addListener('mouseout', function() {
    //  infoWindow.close();
    // })

    //close infowindow when clicked anywhere on the map
    google.maps.event.addListener(map, 'click', function() {
      infoWindow.close();
    });




    //async
//     setTimeout(function() {
//       let markerCluster = new MarkerClusterer(map, markersCluster,
//         {imagePath:'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
//       });
// }, 100);

}

function clearOverlays() {
for (let i = 0; i < markersArr.length; i++ ) {
      markersArr[i].setMap(null);
    }
    markersArr = [];
  }

</script>
